{"ast":null,"code":"import*as types from\"../constants/ActionTypes\";import httpInstance from\"../httpClient\";export var getuserlist=function getuserlist(history,callback){// console.log(history)\nreturn function(dispatch){return httpInstance({method:\"get\",url:\"chatroom/chateduser\"}).then(function(res){history.push(\"/messenger/\"+res.data[0]._id+\"/\"+res.data[0].chatId);dispatch(setUserlist(res.data));}).catch(function(error){// console.log(error)\nhistory.push(\"/messenger\");dispatch(setUserlist([]));});};};export var getalluser=function getalluser(payload,callback){return function(dispatch){return httpInstance({method:\"get\",url:\"user/getusers\"}).then(function(res){// console.log(res.data)\ndispatch(setAlluser(res.data));}).catch(function(error){console.log(error);dispatch(setAlluser([]));});};};export var getuserchat=function getuserchat(cid,callback){return function(dispatch){return httpInstance({method:\"get\",url:\"chatroom/getuserchat/\"+cid}).then(function(res){// console.log(res.data)\ndispatch(setUserchat(res.data));}).catch(function(error){console.log(error);dispatch(setUserchat([]));});};};export var sendmsg=function sendmsg(payload,callback){return function(dispatch){return dispatch(setNewmsg(payload));};};export var setUserlist=function setUserlist(payload){return{type:types.USER_CHAT_LIST,payload:payload};};export var setAlluser=function setAlluser(payload){return{type:types.ALL_USER,payload:payload};};export var addNewUser=function addNewUser(payload,history){return function(dispatch){return httpInstance({method:\"post\",url:\"chatroom/create-channel\",data:payload}).then(function(res){dispatch(setNewUser(res.data));history.push(\"/messenger/\"+res.data._id+\"/\"+res.data.chatId);}).catch(function(error){console.log(error);// dispatch(setNewUser([]))\n});};};export var setNewUser=function setNewUser(payload){return{type:types.ADD_NEWUSER,payload:payload};};export var setUserchat=function setUserchat(payload){return{type:types.USER_CHAT,payload:payload};};export var setNewmsg=function setNewmsg(payload){return{type:types.SEND_MSG,payload:payload};};","map":{"version":3,"sources":["/var/www/html/react_project/realchat/github/realTimeChatApp/src/actions/chatActions.js"],"names":["types","httpInstance","getuserlist","history","callback","dispatch","method","url","then","res","push","data","_id","chatId","setUserlist","catch","error","getalluser","payload","setAlluser","console","log","getuserchat","cid","setUserchat","sendmsg","setNewmsg","type","USER_CHAT_LIST","ALL_USER","addNewUser","setNewUser","ADD_NEWUSER","USER_CHAT","SEND_MSG"],"mappings":"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","sourcesContent":["import * as types from \"../constants/ActionTypes\";\nimport httpInstance from \"../httpClient\";\n\nexport const getuserlist = (history,callback) => {\n    // console.log(history)\n    return dispatch => {\n        return  httpInstance({\n                  method: \"get\",\n                  url: \"chatroom/chateduser\"\n                })\n                .then((res) => {\n                    history.push(\"/messenger/\"+res.data[0]._id+\"/\"+res.data[0].chatId)\n                    dispatch(setUserlist(res.data))\n                })\n                .catch((error) => {\n                    // console.log(error)\n                    history.push(\"/messenger\")\n                    dispatch(setUserlist([]))\n                });\n    }\n}\n\nexport const getalluser = (payload,callback) => {\n    return dispatch => {\n        return  httpInstance({\n                  method: \"get\",\n                  url: \"user/getusers\"\n                })\n                .then((res) => {\n                    // console.log(res.data)\n                    dispatch(setAlluser(res.data))\n                })\n                .catch((error) => {\n                    console.log(error)\n                    dispatch(setAlluser([]))\n                });\n    }\n}\n\nexport const getuserchat = (cid,callback) => {\n    return dispatch => {\n        return  httpInstance({\n                  method: \"get\",\n                  url: \"chatroom/getuserchat/\"+cid\n                })\n                .then((res) => {\n                    // console.log(res.data)\n                    dispatch(setUserchat(res.data))\n                })\n                .catch((error) => {\n                    console.log(error)\n                    dispatch(setUserchat([]))\n                });\n    }\n}\n\nexport const sendmsg = (payload,callback) => {\n    return dispatch => {\n        return    dispatch(setNewmsg(payload))\n    }\n}\n\nexport const setUserlist = (payload) => {\n    return {\n        type: types.USER_CHAT_LIST,\n        payload: payload,\n    }\n}\n\nexport const setAlluser = (payload) => {\n    return {\n        type: types.ALL_USER,\n        payload: payload,\n    }\n}\n\nexport const addNewUser = (payload,history) => {\n    return dispatch => {\n        return  httpInstance({\n                  method: \"post\",\n                  url: \"chatroom/create-channel\",\n                  data:payload\n                })\n                .then((res) => {\n                    dispatch(setNewUser(res.data))\n                    history.push(\"/messenger/\"+res.data._id+\"/\"+res.data.chatId)\n                })\n                .catch((error) => {\n                    console.log(error)\n                    // dispatch(setNewUser([]))\n                });\n    }\n}\n\n\nexport const setNewUser = (payload) => {\n    return {\n        type: types.ADD_NEWUSER,\n        payload: payload,\n    }\n}\n\nexport const setUserchat = (payload) => {\n    return {\n        type: types.USER_CHAT,\n        payload: payload,\n    }\n}\n\nexport const setNewmsg = (payload) => {\n    return {\n        type: types.SEND_MSG,\n        payload: payload,\n    }\n}"]},"metadata":{},"sourceType":"module"}