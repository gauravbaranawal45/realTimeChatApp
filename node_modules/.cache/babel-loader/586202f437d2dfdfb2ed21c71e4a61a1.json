{"ast":null,"code":"import * as types from \"../constants/ActionTypes\";\nimport httpInstance from \"../httpClient\";\nexport const getuserlist = (history, callback) => {\n  return dispatch => {\n    return httpInstance({\n      method: \"get\",\n      url: \"chatroom/chateduser\"\n    }).then(res => {\n      console.log(res.data);\n      history.push(\"/newchat/\" + res.data[0]._id + \"/\" + res.data[0].chatId);\n      dispatch(setUserlist(res.data)); // callback(true)\n    }).catch(error => {\n      console.log(error);\n      dispatch(setUserlist([])); // callback(true)\n    });\n  };\n};\nexport const getalluser = (payload, callback) => {\n  return dispatch => {\n    return httpInstance({\n      method: \"get\",\n      url: \"user/getusers\"\n    }).then(res => {\n      console.log(res.data);\n      dispatch(setAlluser(res.data));\n    }).catch(error => {\n      console.log(error);\n      dispatch(setUserlist([]));\n    });\n  };\n};\nexport const setUserlist = payload => {\n  return {\n    type: types.USER_CHAT_LIST,\n    payload: payload\n  };\n};\nexport const setAlluser = payload => {\n  return {\n    type: types.ALL_USER,\n    payload: payload\n  };\n};\nexport const addNewUser = payload => {\n  return {\n    type: types.ADD_USER_CHAT_LIST,\n    payload: payload\n  };\n};","map":{"version":3,"sources":["/var/www/html/react_project/realchat/chatapp/src/actions/chatActions.js"],"names":["types","httpInstance","getuserlist","history","callback","dispatch","method","url","then","res","console","log","data","push","_id","chatId","setUserlist","catch","error","getalluser","payload","setAlluser","type","USER_CHAT_LIST","ALL_USER","addNewUser","ADD_USER_CHAT_LIST"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,OAAD,EAASC,QAAT,KAAsB;AAC7C,SAAOC,QAAQ,IAAI;AACf,WAAQJ,YAAY,CAAC;AACXK,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,GAAG,EAAE;AAFM,KAAD,CAAZ,CAICC,IAJD,CAIOC,GAAD,IAAS;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACAT,MAAAA,OAAO,CAACU,IAAR,CAAa,cAAYJ,GAAG,CAACG,IAAJ,CAAS,CAAT,EAAYE,GAAxB,GAA4B,GAA5B,GAAgCL,GAAG,CAACG,IAAJ,CAAS,CAAT,EAAYG,MAAzD;AACAV,MAAAA,QAAQ,CAACW,WAAW,CAACP,GAAG,CAACG,IAAL,CAAZ,CAAR,CAHW,CAIX;AACH,KATD,EAUCK,KAVD,CAUQC,KAAD,IAAW;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACAb,MAAAA,QAAQ,CAACW,WAAW,CAAC,EAAD,CAAZ,CAAR,CAFc,CAGd;AACH,KAdD,CAAR;AAeH,GAhBD;AAiBH,CAlBM;AAoBP,OAAO,MAAMG,UAAU,GAAG,CAACC,OAAD,EAAShB,QAAT,KAAsB;AAC5C,SAAOC,QAAQ,IAAI;AACf,WAAQJ,YAAY,CAAC;AACXK,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,GAAG,EAAE;AAFM,KAAD,CAAZ,CAICC,IAJD,CAIOC,GAAD,IAAS;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACAP,MAAAA,QAAQ,CAACgB,UAAU,CAACZ,GAAG,CAACG,IAAL,CAAX,CAAR;AACH,KAPD,EAQCK,KARD,CAQQC,KAAD,IAAW;AACdR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACAb,MAAAA,QAAQ,CAACW,WAAW,CAAC,EAAD,CAAZ,CAAR;AACH,KAXD,CAAR;AAYH,GAbD;AAcH,CAfM;AAiBP,OAAO,MAAMA,WAAW,GAAII,OAAD,IAAa;AACpC,SAAO;AACHE,IAAAA,IAAI,EAAEtB,KAAK,CAACuB,cADT;AAEHH,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,UAAU,GAAID,OAAD,IAAa;AACnC,SAAO;AACHE,IAAAA,IAAI,EAAEtB,KAAK,CAACwB,QADT;AAEHJ,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMK,UAAU,GAAIL,OAAD,IAAa;AACnC,SAAO;AACHE,IAAAA,IAAI,EAAEtB,KAAK,CAAC0B,kBADT;AAEHN,IAAAA,OAAO,EAAEA;AAFN,GAAP;AAIH,CALM","sourcesContent":["import * as types from \"../constants/ActionTypes\";\nimport httpInstance from \"../httpClient\";\n\nexport const getuserlist = (history,callback) => {\n    return dispatch => {\n        return  httpInstance({\n                  method: \"get\",\n                  url: \"chatroom/chateduser\"\n                })\n                .then((res) => {\n                    console.log(res.data)\n                    history.push(\"/newchat/\"+res.data[0]._id+\"/\"+res.data[0].chatId)\n                    dispatch(setUserlist(res.data))\n                    // callback(true)\n                })\n                .catch((error) => {\n                    console.log(error)\n                    dispatch(setUserlist([]))\n                    // callback(true)\n                });\n    }\n}\n\nexport const getalluser = (payload,callback) => {\n    return dispatch => {\n        return  httpInstance({\n                  method: \"get\",\n                  url: \"user/getusers\"\n                })\n                .then((res) => {\n                    console.log(res.data)\n                    dispatch(setAlluser(res.data))\n                })\n                .catch((error) => {\n                    console.log(error)\n                    dispatch(setUserlist([]))\n                });\n    }\n}\n\nexport const setUserlist = (payload) => {\n    return {\n        type: types.USER_CHAT_LIST,\n        payload: payload,\n    }\n}\n\nexport const setAlluser = (payload) => {\n    return {\n        type: types.ALL_USER,\n        payload: payload,\n    }\n}\n\nexport const addNewUser = (payload) => {\n    return {\n        type: types.ADD_USER_CHAT_LIST,\n        payload: payload,\n    }\n}"]},"metadata":{},"sourceType":"module"}