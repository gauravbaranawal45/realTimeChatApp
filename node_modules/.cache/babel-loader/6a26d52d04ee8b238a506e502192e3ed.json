{"ast":null,"code":"import _objectSpread from\"/var/www/html/react_project/realchat/github/realTimeChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/var/www/html/react_project/realchat/github/realTimeChatApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Component}from\"react\";import{connect}from\"react-redux\";import{withRouter}from\"react-router-dom\";import Userlist from\"./Userlist\";import Userchat from\"./Userchat\";import{getuserlist as _getuserlist,getalluser as _getalluser,addNewUser as _addNewUser,getuserchat as _getuserchat,sendmsg as _sendmsg}from'../../actions/chatActions';import'./style.css';var Messenger=function Messenger(props){var _React$useState=React.useState({message:\"\",userchat:[],chatusers:[],userList:[],open:false,searchkey:'',searchpeopledata:[],suggetionvalue:[],alluser:[]}),_React$useState2=_slicedToArray(_React$useState,2),state=_React$useState2[0],setState=_React$useState2[1];var _React$useState3=React.useState([]),_React$useState4=_slicedToArray(_React$useState3,2),messages=_React$useState4[0],setMessages=_React$useState4[1];var sendmsg=function sendmsg(e){e.preventDefault();var userId=JSON.parse(localStorage.getItem('__chatauth')).userId;var socket=props.socket;var payload={message:state.message,attachmentName:'',attachmentType:'',channelId:props.match.params.cid,receiver:props.match.params.id,senderId:userId};if(socket){socket.emit(\"chatroomMessage\",payload);setState(_objectSpread(_objectSpread({},state),{},{message:\"\"}));}setTimeout(function(){var target=document.querySelector(\"#target\");target.scrollIntoView();},100);};React.useEffect(function(){var socket=props.socket;if(socket){socket.on(\"newMessage\",function(message){props.sendmsg(message);console.log('message',message);});}},[props.socket]);React.useEffect(function(){props.getuserlist(props.history);props.getalluser();props.getuserchat(props.match.params.cid);},[]);React.useEffect(function(){var socket=props.socket;props.getuserchat(props.match.params.cid);if(socket){socket.emit(\"joinChat\",{channelId:props.match.params.cid});}setTimeout(function(){var target=document.querySelector(\"#target\");target.scrollIntoView();},100);},[props.match.params.cid,props.socket]);var target=document.querySelector(\"#target\");if(target){target.scrollIntoView();}var onchangeHandler=function onchangeHandler(val){setState(_objectSpread(_objectSpread({},state),{},{message:val}));};return/*#__PURE__*/React.createElement(\"div\",{className:\"container-fluid h-100\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row justify-content-center h-100\"},/*#__PURE__*/React.createElement(Userlist,{chatlistdata:props.chatlistdata,addNewUser:props.addNewUser,receiver:props.match.params.id}),/*#__PURE__*/React.createElement(Userchat,{userchat:props.userchat,onchangeHandler:onchangeHandler,message:state.message,sendmsg:sendmsg,receiver:props.match.params.id})));};var mapStateToProps=function mapStateToProps(state,ownProps){return{chatlistdata:state.chat,userchat:state.chat.userchat};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{getuserlist:function getuserlist(payload,callback){return dispatch(_getuserlist(payload,callback));},getalluser:function getalluser(payload,callback){return dispatch(_getalluser(payload,callback));},addNewUser:function addNewUser(payload,callback){return dispatch(_addNewUser(payload,callback));},getuserchat:function getuserchat(payload,callback){return dispatch(_getuserchat(payload,callback));},sendmsg:function sendmsg(payload,callback){return dispatch(_sendmsg(payload,callback));}};};export default withRouter(connect(mapStateToProps,mapDispatchToProps)(Messenger));","map":{"version":3,"sources":["/var/www/html/react_project/realchat/github/realTimeChatApp/src/Component/Messenger/Messenger.js"],"names":["React","Component","connect","withRouter","Userlist","Userchat","getuserlist","getalluser","addNewUser","getuserchat","sendmsg","Messenger","props","useState","message","userchat","chatusers","userList","open","searchkey","searchpeopledata","suggetionvalue","alluser","state","setState","messages","setMessages","e","preventDefault","userId","JSON","parse","localStorage","getItem","socket","payload","attachmentName","attachmentType","channelId","match","params","cid","receiver","id","senderId","emit","setTimeout","target","document","querySelector","scrollIntoView","useEffect","on","console","log","history","onchangeHandler","val","chatlistdata","mapStateToProps","ownProps","chat","mapDispatchToProps","dispatch","callback"],"mappings":"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","sourcesContent":["import React ,{Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\nimport Userlist from \"./Userlist\";\nimport Userchat from \"./Userchat\";\nimport {getuserlist,getalluser,addNewUser,getuserchat,sendmsg} from '../../actions/chatActions'\nimport './style.css'\n\n\n\n\nconst Messenger = (props) => {\n\n\tconst [state,setState] = React.useState({\n\t\tmessage:\"\",\n\t    userchat:[],\n\t    chatusers:[],\n\t    userList:[],\n\t    open:false,\n\t    searchkey:'',\n\t    searchpeopledata:[],\n\t    suggetionvalue:[],\n\t    alluser:[],\n\t})\n\n\tconst [messages, setMessages] = React.useState([]);\n\n\tconst sendmsg = (e) => {\n\t    e.preventDefault();\n\t    let userId = JSON.parse(localStorage.getItem('__chatauth')).userId;\n\t    let socket = props.socket;\n\t    let payload = {\n\t\t\tmessage:state.message,\n\t\t\tattachmentName:'',\n\t\t\tattachmentType:'',\n\t\t\tchannelId:props.match.params.cid,\n\t\t\treceiver:props.match.params.id,\n\t\t\tsenderId:userId,\n\t    }\n\t    if (socket) {\n\t      \tsocket.emit(\"chatroomMessage\", payload);\n\t      \tsetState({...state,message:\"\"})\n\t    }\n\t    setTimeout(()=>{\n\t    \tlet target = document.querySelector(\"#target\");\n\t\t\ttarget.scrollIntoView();\n\t    },100)\n\t}\n\n\n\tReact.useEffect(() => {\n\t\tlet socket = props.socket;\n\t    if (socket) {\n\t      socket.on(\"newMessage\", (message) => {\n\t      \tprops.sendmsg(message)\n\t      \tconsole.log('message',message)\n\t      });\n\t    }\n\t}, [props.socket]);\n\n \tReact.useEffect(() => {\n \t\tprops.getuserlist(props.history)\n\t\tprops.getalluser()\n\t\tprops.getuserchat(props.match.params.cid)\n\t}, []);\n\n\n \tReact.useEffect(() => {\n \t\tlet socket = props.socket;\n\t\tprops.getuserchat(props.match.params.cid)\n\t\tif (socket) {\n\t      socket.emit(\"joinChat\", {\n\t        channelId:props.match.params.cid,\n\t      });\n\t    }\n\t    setTimeout(()=>{\n\t    \tlet target = document.querySelector(\"#target\");\n\t\t\ttarget.scrollIntoView();\n\t    },100)\n\t}, [props.match.params.cid,props.socket]);\n\n \tlet target = document.querySelector(\"#target\");\n\tif(target){\n\t\ttarget.scrollIntoView();\n\t}\n\n\tconst onchangeHandler = (val) => {\n\t    setState({...state,message:val})\n\t}\n\n\treturn (\n\t    <div className=\"container-fluid h-100\">\n\t\t\t<div className=\"row justify-content-center h-100\">\n\t\t\t\t<Userlist\n\t\t\t\t\tchatlistdata={props.chatlistdata}\n\t\t\t\t\taddNewUser={props.addNewUser}\n\t\t\t\t\treceiver={props.match.params.id}\n\t\t\t\t/>\n\t\t\t\t<Userchat\n\t\t\t\t\tuserchat={props.userchat}\n\t\t\t\t\tonchangeHandler={onchangeHandler}\n\t\t\t\t\tmessage={state.message}\n\t\t\t\t\tsendmsg={sendmsg}\n\t\t\t\t\treceiver={props.match.params.id}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t  );\n  \t\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n    \tchatlistdata:state.chat,\n    \tuserchat:state.chat.userchat,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getuserlist: (payload,callback) => dispatch(getuserlist(payload,callback)),\n        getalluser: (payload,callback) => dispatch(getalluser(payload,callback)),\n        addNewUser: (payload,callback) => dispatch(addNewUser(payload,callback)),\n        getuserchat: (payload,callback) => dispatch(getuserchat(payload,callback)),\n        sendmsg: (payload,callback) => dispatch(sendmsg(payload,callback)),\n    };\n  };\n  \nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Messenger))"]},"metadata":{},"sourceType":"module"}