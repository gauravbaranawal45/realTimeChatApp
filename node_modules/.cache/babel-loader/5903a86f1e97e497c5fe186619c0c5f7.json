{"ast":null,"code":"var _jsxFileName = \"/var/www/html/react_project/realchat/chatapp/src/Component/Messenger/Messenger.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport Userlist from \"./Userlist\";\nimport Userchat from \"./Userchat\";\nimport { getuserlist, getalluser, addNewUser, getuserchat, sendmsg } from '../../actions/chatActions';\nimport './style.css';\n\nconst Messenger = props => {\n  const [state, setState] = React.useState({\n    message: \"\",\n    userchat: [],\n    chatusers: [],\n    userList: [],\n    open: false,\n    searchkey: '',\n    searchpeopledata: [],\n    suggetionvalue: [],\n    alluser: []\n  });\n  const [messages, setMessages] = React.useState([]);\n  React.useEffect(() => {// let socket = props.socket;\n    //    if (socket) {\n    //      socket.on(\"newMessage\", (message) => {\n    //      \tconsole.log(message)\n    //        // const newMessages = [...messages, message];\n    //        // setMessages(newMessages);\n    //      });\n    //    }\n    //eslint-disable-next-line\n  }, []);\n  React.useEffect(() => {\n    props.getuserlist(props.history);\n    props.getalluser();\n    props.getuserchat(props.match.params.cid);\n  }, []);\n  React.useEffect(() => {\n    props.getuserchat(props.match.params.cid);\n  }, [props.match.params.cid]);\n\n  const onchangeHandler = val => {\n    setState({ ...state,\n      message: val\n    });\n  };\n\n  const sendmsg = e => {\n    e.preventDefault();\n    let userId = JSON.parse(localStorage.getItem('__chatauth')).userId;\n    let socket = props.socket;\n    let payload = {\n      message: state.message,\n      attachmentName: '',\n      attachmentType: '',\n      channelId: props.match.params.cid,\n      receiver: props.match.params.id,\n      senderId: userId\n    };\n\n    if (socket) {\n      socket.emit(\"chatroomMessage\", payload, res => {\n        console.log(res);\n      });\n      setState({ ...state,\n        message: \"\"\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row justify-content-center h-100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Userlist, {\n    chatlistdata: props.chatlistdata,\n    addNewUser: props.addNewUser,\n    receiver: props.match.params.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Userchat, {\n    userchat: props.userchat,\n    onchangeHandler: onchangeHandler,\n    message: state.message,\n    sendmsg: sendmsg,\n    receiver: props.match.params.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  })));\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    chatlistdata: state.chat,\n    userchat: state.chat.userchat\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getuserlist: (payload, callback) => dispatch(getuserlist(payload, callback)),\n    getalluser: (payload, callback) => dispatch(getalluser(payload, callback)),\n    addNewUser: (payload, callback) => dispatch(addNewUser(payload, callback)),\n    getuserchat: (payload, callback) => dispatch(getuserchat(payload, callback)),\n    sendmsg: (payload, callback) => dispatch(sendmsg(payload, callback))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Messenger));","map":{"version":3,"sources":["/var/www/html/react_project/realchat/chatapp/src/Component/Messenger/Messenger.js"],"names":["React","Component","connect","withRouter","Userlist","Userchat","getuserlist","getalluser","addNewUser","getuserchat","sendmsg","Messenger","props","state","setState","useState","message","userchat","chatusers","userList","open","searchkey","searchpeopledata","suggetionvalue","alluser","messages","setMessages","useEffect","history","match","params","cid","onchangeHandler","val","e","preventDefault","userId","JSON","parse","localStorage","getItem","socket","payload","attachmentName","attachmentType","channelId","receiver","id","senderId","emit","res","console","log","chatlistdata","mapStateToProps","ownProps","chat","mapDispatchToProps","dispatch","callback"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,WAAR,EAAoBC,UAApB,EAA+BC,UAA/B,EAA0CC,WAA1C,EAAsDC,OAAtD,QAAoE,2BAApE;AACA,OAAO,aAAP;;AAKA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAE5B,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBd,KAAK,CAACe,QAAN,CAAe;AACvCC,IAAAA,OAAO,EAAC,EAD+B;AAEpCC,IAAAA,QAAQ,EAAC,EAF2B;AAGpCC,IAAAA,SAAS,EAAC,EAH0B;AAIpCC,IAAAA,QAAQ,EAAC,EAJ2B;AAKpCC,IAAAA,IAAI,EAAC,KAL+B;AAMpCC,IAAAA,SAAS,EAAC,EAN0B;AAOpCC,IAAAA,gBAAgB,EAAC,EAPmB;AAQpCC,IAAAA,cAAc,EAAC,EARqB;AASpCC,IAAAA,OAAO,EAAC;AAT4B,GAAf,CAAzB;AAYA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B1B,KAAK,CAACe,QAAN,CAAe,EAAf,CAAhC;AAEAf,EAAAA,KAAK,CAAC2B,SAAN,CAAgB,MAAM,CACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACH,GAVD,EAUG,EAVH;AAcC3B,EAAAA,KAAK,CAAC2B,SAAN,CAAgB,MAAM;AACrBf,IAAAA,KAAK,CAACN,WAAN,CAAkBM,KAAK,CAACgB,OAAxB;AACDhB,IAAAA,KAAK,CAACL,UAAN;AACAK,IAAAA,KAAK,CAACH,WAAN,CAAkBG,KAAK,CAACiB,KAAN,CAAYC,MAAZ,CAAmBC,GAArC;AACA,GAJA,EAIE,EAJF;AAOA/B,EAAAA,KAAK,CAAC2B,SAAN,CAAgB,MAAM;AACtBf,IAAAA,KAAK,CAACH,WAAN,CAAkBG,KAAK,CAACiB,KAAN,CAAYC,MAAZ,CAAmBC,GAArC;AACA,GAFA,EAEE,CAACnB,KAAK,CAACiB,KAAN,CAAYC,MAAZ,CAAmBC,GAApB,CAFF;;AAKD,QAAMC,eAAe,GAAIC,GAAD,IAAS;AAC7BnB,IAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAUG,MAAAA,OAAO,EAACiB;AAAlB,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMvB,OAAO,GAAIwB,CAAD,IAAO;AACnBA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,EAA+CJ,MAA5D;AACA,QAAIK,MAAM,GAAG7B,KAAK,CAAC6B,MAAnB;AACA,QAAIC,OAAO,GAAG;AAChB1B,MAAAA,OAAO,EAACH,KAAK,CAACG,OADE;AAEhB2B,MAAAA,cAAc,EAAC,EAFC;AAGhBC,MAAAA,cAAc,EAAC,EAHC;AAIhBC,MAAAA,SAAS,EAACjC,KAAK,CAACiB,KAAN,CAAYC,MAAZ,CAAmBC,GAJb;AAKhBe,MAAAA,QAAQ,EAAClC,KAAK,CAACiB,KAAN,CAAYC,MAAZ,CAAmBiB,EALZ;AAMhBC,MAAAA,QAAQ,EAACZ;AANO,KAAd;;AAQA,QAAIK,MAAJ,EAAY;AACTA,MAAAA,MAAM,CAACQ,IAAP,CAAY,iBAAZ,EAA+BP,OAA/B,EAAuCQ,GAAG,IAAE;AAC3CC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,OAFD;AAGApC,MAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAUG,QAAAA,OAAO,EAAC;AAAlB,OAAD,CAAR;AACF;AACJ,GAlBD;;AAsBA,sBACI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACF;AAAK,IAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,QAAD;AACC,IAAA,YAAY,EAAEJ,KAAK,CAACyC,YADrB;AAEC,IAAA,UAAU,EAAEzC,KAAK,CAACJ,UAFnB;AAGC,IAAA,QAAQ,EAAEI,KAAK,CAACiB,KAAN,CAAYC,MAAZ,CAAmBiB,EAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,eAMC,oBAAC,QAAD;AACC,IAAA,QAAQ,EAAEnC,KAAK,CAACK,QADjB;AAEC,IAAA,eAAe,EAAEe,eAFlB;AAGC,IAAA,OAAO,EAAEnB,KAAK,CAACG,OAHhB;AAIC,IAAA,OAAO,EAAEN,OAJV;AAKC,IAAA,QAAQ,EAAEE,KAAK,CAACiB,KAAN,CAAYC,MAAZ,CAAmBiB,EAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAND,CADE,CADJ;AAmBA,CAvFD;;AAyFA,MAAMO,eAAe,GAAG,CAACzC,KAAD,EAAQ0C,QAAR,KAAqB;AACzC,SAAO;AACNF,IAAAA,YAAY,EAACxC,KAAK,CAAC2C,IADb;AAENvC,IAAAA,QAAQ,EAACJ,KAAK,CAAC2C,IAAN,CAAWvC;AAFd,GAAP;AAIH,CALD;;AAOA,MAAMwC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHpD,IAAAA,WAAW,EAAE,CAACoC,OAAD,EAASiB,QAAT,KAAsBD,QAAQ,CAACpD,WAAW,CAACoC,OAAD,EAASiB,QAAT,CAAZ,CADxC;AAEHpD,IAAAA,UAAU,EAAE,CAACmC,OAAD,EAASiB,QAAT,KAAsBD,QAAQ,CAACnD,UAAU,CAACmC,OAAD,EAASiB,QAAT,CAAX,CAFvC;AAGHnD,IAAAA,UAAU,EAAE,CAACkC,OAAD,EAASiB,QAAT,KAAsBD,QAAQ,CAAClD,UAAU,CAACkC,OAAD,EAASiB,QAAT,CAAX,CAHvC;AAIHlD,IAAAA,WAAW,EAAE,CAACiC,OAAD,EAASiB,QAAT,KAAsBD,QAAQ,CAACjD,WAAW,CAACiC,OAAD,EAASiB,QAAT,CAAZ,CAJxC;AAKHjD,IAAAA,OAAO,EAAE,CAACgC,OAAD,EAASiB,QAAT,KAAsBD,QAAQ,CAAChD,OAAO,CAACgC,OAAD,EAASiB,QAAT,CAAR;AALpC,GAAP;AAOD,CARH;;AAUA,eAAexD,UAAU,CAACD,OAAO,CAACoD,eAAD,EAAiBG,kBAAjB,CAAP,CAA4C9C,SAA5C,CAAD,CAAzB","sourcesContent":["import React ,{Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\nimport Userlist from \"./Userlist\";\nimport Userchat from \"./Userchat\";\nimport {getuserlist,getalluser,addNewUser,getuserchat,sendmsg} from '../../actions/chatActions'\nimport './style.css'\n\n\n\n\nconst Messenger = (props) => {\n\n\tconst [state,setState] = React.useState({\n\t\tmessage:\"\",\n\t    userchat:[],\n\t    chatusers:[],\n\t    userList:[],\n\t    open:false,\n\t    searchkey:'',\n\t    searchpeopledata:[],\n\t    suggetionvalue:[],\n\t    alluser:[],\n\t})\n\n\tconst [messages, setMessages] = React.useState([]);\n\n\tReact.useEffect(() => {\n\t\t// let socket = props.socket;\n\t //    if (socket) {\n\t //      socket.on(\"newMessage\", (message) => {\n\t //      \tconsole.log(message)\n\t //        // const newMessages = [...messages, message];\n\t //        // setMessages(newMessages);\n\t //      });\n\t //    }\n\t    //eslint-disable-next-line\n\t}, []);\n\n\n\n \tReact.useEffect(() => {\n \t\tprops.getuserlist(props.history)\n\t\tprops.getalluser()\n\t\tprops.getuserchat(props.match.params.cid)\n\t}, []);\n\n\n \tReact.useEffect(() => {\n\t\tprops.getuserchat(props.match.params.cid)\n\t}, [props.match.params.cid]);\n\n\n\tconst onchangeHandler = (val) => {\n\t    setState({...state,message:val})\n\t}\n\n\tconst sendmsg = (e) => {\n\t    e.preventDefault();\n\t    let userId = JSON.parse(localStorage.getItem('__chatauth')).userId;\n\t    let socket = props.socket;\n\t    let payload = {\n\t\t\tmessage:state.message,\n\t\t\tattachmentName:'',\n\t\t\tattachmentType:'',\n\t\t\tchannelId:props.match.params.cid,\n\t\t\treceiver:props.match.params.id,\n\t\t\tsenderId:userId,\n\t    }\n\t    if (socket) {\n\t      \tsocket.emit(\"chatroomMessage\", payload,res=>{\n\t      \t\tconsole.log(res)\n\t      \t});\n\t      \tsetState({...state,message:\"\"})\n\t    }\n\t}\n\n\n\n\treturn (\n\t    <div className=\"container-fluid h-100\">\n\t\t\t<div className=\"row justify-content-center h-100\">\n\t\t\t\t<Userlist\n\t\t\t\t\tchatlistdata={props.chatlistdata}\n\t\t\t\t\taddNewUser={props.addNewUser}\n\t\t\t\t\treceiver={props.match.params.id}\n\t\t\t\t/>\n\t\t\t\t<Userchat\n\t\t\t\t\tuserchat={props.userchat}\n\t\t\t\t\tonchangeHandler={onchangeHandler}\n\t\t\t\t\tmessage={state.message}\n\t\t\t\t\tsendmsg={sendmsg}\n\t\t\t\t\treceiver={props.match.params.id}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t  );\n  \t\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n    \tchatlistdata:state.chat,\n    \tuserchat:state.chat.userchat,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getuserlist: (payload,callback) => dispatch(getuserlist(payload,callback)),\n        getalluser: (payload,callback) => dispatch(getalluser(payload,callback)),\n        addNewUser: (payload,callback) => dispatch(addNewUser(payload,callback)),\n        getuserchat: (payload,callback) => dispatch(getuserchat(payload,callback)),\n        sendmsg: (payload,callback) => dispatch(sendmsg(payload,callback)),\n    };\n  };\n  \nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Messenger))"]},"metadata":{},"sourceType":"module"}